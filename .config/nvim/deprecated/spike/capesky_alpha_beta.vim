" {{{1 TITLE
" TODO : make :Hicontrast command
" See a descriptive list of highlight groups with:
"       :help highlight-groups
"
" The base of this colour profile was generated by http://bytefluent.com/vivify 2019-02-19
" Can see a well formatted list of highlight groups with:
"     :so $VIMRUNTIME/syntax/hitest.vim
"
" Refer to :highlight-groups for an explanation of each group
" Vim color file - michael
" Terminal based colours:
" cterm (Font style), can be the following values:
"    bold
"    underline
"    reverse
"    italic
"    none
" ctermfg - Terminal Foreground colour
" ctermbg - Terminal Background colour
" Refer to cterm_colours.png in current folder

" gui (Font style), can be the following values:
"       bold
"       underline
"       undercurl	curly underline
"       strikethrough
"       reverse
"       inverse		same as reverse
"       italic
"       standout
"       nocombine	override attributes instead of combining them
"       NONE		no attributes used (used to reset it)
"
" Can be multiple values e.g.
"    gui=bold,undercurl
" guifg - GUI Foreground colour
" guibg - GUI Background colour
" guisp - GUI underline colour
" Can set to RGB values eg. #FF0000 for red
"
" Can link one group to another with:
"     hi link my_custom_hi Normal
"
" If one uses color names, e.g. "blue", they are not the terminal colours,
" rather Vim's own shade of default colours.

" {{{1 THEME SETTINGS
if !has("gui_running") && &t_co != 88 && &t_co != 256
    " finish
endif

hi clear
if exists("syntax_on")
    syntax reset
endif

let g:colors_name = "capesky"
set background=dark
set t_co=256

let s:term_colours = ['black', 'blue', 'brown', 'cyan', 'darkblue', 'darkcyan', 'darkgray', 'darkgreen', 'darkgrey', 'darkmagenta', 'darkred', 'darkyellow', 'gray', 'green', 'grey', 'lightblue', 'lightcyan', 'lightgray', 'lightgreen', 'lightgrey', 'lightmagenta', 'lightred', 'lightyellow', 'magenta', 'red', 'white', 'yellow']
let s:c = {} " so can place the definition below the functions

" Contrast between 0 for contrast and 2 high contrast
let g:capesky_contrast = get(g:, 'capesky_contrast', 1)
" Brightness between -128 for brightness and +128 high brightness (integers)
let g:capesky_brightness = get(g:, 'capesky_brightness', 0)

function! s:adjustColours(contrast_delta, brightness_delta)
    let g:capesky_contrast += a:contrast_delta
    let g:capesky_contrast = (g:capesky_contrast <  0) ?  0 : g:capesky_contrast
    let g:capesky_contrast = (g:capesky_contrast > 10) ? 10 : g:capesky_contrast

    let g:capesky_brightness += a:brightness_delta
    let g:capesky_brightness = (g:capesky_brightness <  -128) ? -128 : g:capesky_brightness
    let g:capesky_brightness = (g:capesky_brightness >  +128) ? +128 : g:capesky_brightness
    " call s:applyScheme()
endfunction
command! ContrastMore call s:adjustColours(+0.1, 0)
command! ContrastLess call s:adjustColours(-0.1, 0)
command! BrightnessMore call s:adjustColours(0, +10)
command! BrightnessLess call s:adjustColours(0, -10)

nnoremap <M-2> :ContrastMore<CR>
nnoremap <M-1> :ContrastLess<CR>
" examples:
" echo s:c['red']['a100']
" echo s:c['bluegray']['200']
"let s:c = {}
" \'python'     : { '':'#ffebee', 100:'#ffcdd2', 200:'#ef9a9a', 300:'#e57373', 400:'#ef5350', 500:'#f44336', 600:'#e53935', 700:'#d32f2f', 800:'#c62828', 900:'#b71c1c', 'a100':'#ff8a80', 'a200':'#ff5252', 'a400':'#ff1744', 'a700':'#d50000' },
" \'pink'       : { 50:'#fce4ec', 100:'#f8bbd0', 200:'#f48fb1', 300:'#f06292', 400:'#ec407a', 500:'#e91e63', 600:'#d81b60', 700:'#c2185b', 800:'#ad1457', 900:'#880e4f', 'a100':'#ff80ab', 'a200':'#ff4081', 'a400':'#f50057', 'a700':'#c51162' },
" \}

" convert hex string to rgb
function! s:hex2rgb(hex)
  let rgb = {}
  let rgb.r = str2nr(a:hex[1:2], 16)
  let rgb.g = str2nr(a:hex[3:4], 16)
  let rgb.b = str2nr(a:hex[5:6], 16)
  return rgb
endfunction

function! s:clamp(number)
    let num = float2nr(round(a:number))
    if num < 0
        return 0
    elseif num > 255
        return 255
    else
        return num
    endif
endfunction

" convert rgb to hex string
function! s:rgb2hex(rgb)
  return printf('#%02x%02x%02x', s:clamp(a:rgb.r), s:clamp(a:rgb.g), s:clamp(a:rgb.b))
endfunction

function! s:render(colour, contrast, brightness)
    let rgb = s:hex2rgb(a:colour)
    let rgb.r = s:clamp(a:contrast * (rgb.r - 128) + 128 + a:brightness)
    let rgb.g = s:clamp(a:contrast * (rgb.g - 128) + 128 + a:brightness)
    let rgb.b = s:clamp(a:contrast * (rgb.b - 128) + 128 + a:brightness)
    let result = s:rgb2hex(rgb)
    " echom a:colour." --> ".result
    return result
endfunction

" let hex = '#FF8007'
" call s:render(hex, 1, 0)
" call s:render(hex, 0.5, 0)
" call s:render(hex, 1, 32)
" finish

function! s:getcolorstr(ground, colour)
    " ground = 'fg' or 'bg'
    " colour = 'red' or '#123456' or 123 or ['#123456',123]
    " echom 'ground:'.a:ground.' color:'.a:colour
    if (tolower(a:ground) == tolower(a:colour)) || (tolower(a:colour) == 'none')
        " example: ground='fg' or 'bg'
        " Note: This only works for gui not cterm
        return ' gui'.a:ground.'='.a:ground " .' cterm'.a:ground.'='.a:ground
    elseif has_key(s:c, a:colour)
        " normal gui index = 0, normal cterm index = 1
        " high_contrast gui index = 2, high_contrast cterm index = 3
        let index = 2
        let hex = s:c[a:colour][index]
        let cterm = s:c[a:colour][index+1]
        let hex = s:render(hex, g:capesky_contrast, g:capesky_brightness)
        return ' gui'.a:ground.'='.hex.' cterm'.a:ground.'='.cterm
    else
        if type(a:colour) == v:t_string
            if a:colour[0] == "#"
                " example: a:colour='#123456'
                return ' gui'.a:ground.'='.a:colour
            else
                if index(s:term_colours, tolower(a:colour)) >= 0
                    " example: a:colour='red'
                    return ' gui'.a:ground.'='.a:colour.' cterm'.a:ground.'='.a:colour
                else
                    " example: a:colour='fuchsia'
                    " if the string is not a term colour, raises an error if
                    " try to set it, e.g. 'fuchsia'
                    return ' gui'.a:ground.'='.a:colour
                endif
            endif
        elseif type(a:colour) == v:t_number
            " example a:colour=123
            return ' gui'.a:ground.'='.a:colour
        endif
    endif
endfunction

function! s:hi(group, fg, ...)
    let str = 'hi ' . a:group

    " forground
    if strlen(a:fg)
        let str .= s:getcolorstr('fg', a:fg)
    endif

    " background
    " a:0 stores the number of optional args passed in
    if a:0 >= 1
        let bg = a:1
        if strlen(bg)
            let str .= s:getcolorstr('bg', bg)
        endif
    endif

    " font format
    if a:0 >= 2
        let style = a:2
        if strlen(style)
            let str .= ' gui='.style.' cterm='.style
        endif
    endif
    exe str
endfun

let s:c = {
    \'colorcolumn'      :['#304040',   0, '#304040', 0],
    \'cursorcolumn'     :['#181818',   0, '#181818', 0],
    \'cursorline'       :['#550000',   0, '#550000', 0],
    \'cursorline_insert':['#4F4F4F',   0, '#4F4F4F', 0],
    \'cursorlinenr_bg'  :['#c0c0c0',   0, '#c0c0c0', 0],
    \'cursorlinenr_fg'  :['#303030',   0, '#303030', 0],
    \'diffadd_bg'       :['#005000',   0, '#005000', 0],
    \'diffadd_fg'       :['#00CF00',   0, '#00CF00', 0],
    \'diffchange_bg'    :['#505000',   0, '#505000', 0],
    \'diffchange_fg'    :['#FFFF00',   0, '#FFFF00', 0],
    \'diffdelete_bg'    :['#500000',   0, '#500000', 0],
    \'diffdelete_fg'    :['#FF0000',   0, '#FF0000', 0],
    \'difftext_bg'      :['#500050',   0, '#500050', 0],
    \'difftext_fg'      :['#FF00FF',   0, '#FF00FF', 0],
    \'directory'        :['#d0ca50',   0, '#d0ca50', 0],
    \'endofbuffer'      :['#300000',   0, '#300000', 0],
    \'foldcolumn_fg'    :['#c000c0',   0, '#c000c0', 0],
    \'incsearch'        :['#ffff00',   0, '#ffff00', 0],
    \'linenr_bg'        :['#404040',   0, '#404040', 0],
    \'linenr_fg'        :['#aab0a8',   0, '#aab0a8', 0],
    \'nontext'          :['#a000a0',   0, '#a000a0', 0],
    \'pmenu'            :['#606060',   0, '#606060', 0],
    \'pmenusbar'        :['#707070',   0, '#707070', 0],
    \'pmenusel'         :['#00b000',   0, '#00b000', 0],
    \'pmenuthumb'       :['#909090',   0, '#909090', 0],
    \'search'           :['#ff8300',   0, '#ff8300', 0],
    \'signcolumn'       :['#000000',   0, '#000000', 0],
    \'spellbad'         :['#700000',   0, '#700000', 0],
    \'spellcap'         :['#600000',   0, '#600000', 0],
    \'spelllocal'       :['#600000',   0, '#600000', 0],
    \'spellrare'        :['#600000',   0, '#600000', 0],
    \'substitute'       :['#ff4434',   0, '#ff4434', 0],
    \'tabline_bg'       :['#ababab',   0, '#ababab', 0],
    \'tabline_fg'       :['#000000',   0, '#000000', 0],
    \'tablinefill'      :['#333333',   0, '#333333', 0],
    \'tablinesel_bg'    :['#00A000',   0, '#00A000', 0],
    \'tablinesel_fg'    :['#192224',   0, '#192224', 0],
    \'vertsplit'        :['#608060',   0, '#608060', 0],
    \'visual'           :['#606060',   0, '#606060', 0],
    \'whitespace'       :['#a000a0',   0, '#a000a0', 0],
    \'wildmenu'         :['#00b000',   0, '#00b000', 0],
    \
    \'main1'            :['#df5821', 166, '#ff4434', 1],
    \'main2'            :['#df9515', 172, '#ff8300', 1],
    \'main3'            :['#dbb94e', 178, '#ffb300', 1],
    \'main1_bg'         :['#571712', 166, '#571712', 1],
    \'main2_bg'         :['#633300', 166, '#633300', 1],
    \'nb1'              :['#d8e020', 184, '#ffed00', 1],
    \'nb2'              :['#d8e020', 184, '#ffe000', 1],
    \'nb3'              :['#d8e080', 184, '#d0d000', 1],
    \'specialh'         :['#d8edff', 112, '#9edaff', 1],
    \'special'          :['#c3d9f1', 112, '#7eceff', 1],
    \'speciall'         :['#888888', 112, '#70b7e3', 1],
    \'special_bg'       :['#2f4d5f', 112, '#2f4d5f', 1],
    \'bushgreen'        :['#92be68', 107, '#c0c000', 1],
    \'stringh'          :['#888888', 112, '#88ff18', 1],
    \'string'           :['#888888', 112, '#86e929', 1],
    \'stringl'          :['#888888', 112, '#71c423', 1],
    \'numberh'          :['#888888', 112, '#00f000', 1],
    \'number'           :['#888888', 112, '#00d000', 1],
    \'numberl'          :['#888888', 112, '#00b000', 1],
    \'constanth'        :['#888888', 112, '#bdff2d', 1],
    \'constant'         :['#888888', 112, '#ade929', 1],
    \'constantl'        :['#888888', 112, '#8aba21', 1],
    \'normalh'          :['#888888', 112, '#ffefe6', 1],
    \'normal'           :['#888888', 112, '#ecddd5', 1],
    \'normall'          :['#888888', 112, '#cabeb7', 1],
    \'normal_bg'        :['#888888', 112, '#594c46', 1],
    \'noiseh'           :['#888888', 112, '#f7d6d6', 1],
    \'noise'            :['#888888', 112, '#dbbdbd', 1],
    \'noisel'           :['#888888', 112, '#c1a7a7', 1],
    \'noisell'          :['#888888', 112, '#a69090', 1],
    \'commenth'         :['#888888', 112, '#dadada', 1],
    \'comment'          :['#888888', 112, '#c0c0c0', 1],
    \'commentl'         :['#888888', 112, '#a0a0a0', 1],
    \'alth'             :['#888888', 112, '#e2cffd', 1],
    \'alt'              :['#888888', 112, '#bdb3ce', 1],
    \'altl'             :['#888888', 112, '#ada4bc', 1],
    \'alt_bg'           :['#888888', 112, '#4e4a55', 1],
    \'brownh'           :['#888888', 112, '#f5af8a', 1],
    \'brown'            :['#888888', 112, '#d09576', 1],
    \'brownl'           :['#888888', 112, '#b07e63', 1],
    \'pinkh'            :['#888888', 112, '#ff6b8a', 1],
    \'pink'             :['#888888', 112, '#ff90a7', 1],
    \'pinkl'            :['#888888', 112, '#e17f93', 1],
    \'purpleh'          :['#888888', 112, '#ff82dc', 1],
    \'purple'           :['#c07cad', 112, '#ffa5e6', 1],
    \'purplel'          :['#888888', 112, '#e392cc', 1],
    \'purple_bg'        :['#c07cad', 112, '#634059', 1],
    \'oldlime'          :['#bfff00',   1, '#8aba21', 1],
    \'oldneonlime'      :['#00ff00',   1, '#888888', 1],
    \'oldmustard'       :['#c3c92d', 142, '#888888', 1],
    \'oldstone'         :['#e4c5ac', 223, '#888888', 1],
    \'oldskygray'       :['#c3b6b9', 145, '#888888', 1],
    \'oldskybright'     :['#c3d9f1', 153, '#888888', 1],
    \'oldskypale'       :['#d8edff', 195, '#888888', 1],
    \'oldgray'          :['#a39397', 102, '#888888', 1],
    \'oldindigo'        :['#ccb3d8', 103, '#888888', 1],
    \'oldbluegray'      :['#9c93a9', 103, '#888888', 1],
    \'oldpurple'        :['#c07cad', 172, '#888888', 1],
    \'oldpeach'         :['#e17f93', 210, '#888888', 1],
    \'isoerrorred'      :['#ff4434',   1, '#ff4434', 1],
    \'isowarningorange' :['#ff8300',   1, '#ff8300', 1],
    \'isocautionyellow' :['#ffed00',   1, '#ffed00', 1],
    \'bg'               :['#000000', 001, '#000000', 1],
    \'bgh'              :['#404040', 001, '#404040', 1],
    \'bghh'             :['#606060', 001, '#606060', 1],
    \'class_bg'         :['#606060', 001, '#504000', 1],
    \}

function s:applyScheme()
    echom printf('Loading CapeSky with contrast: %0.1f brightness %d', g:capesky_contrast, g:capesky_brightness)

" {{{1 BUILTIN GROUPS (:help highlight-groups)

"  ColorColumn  used for the columns set with 'colorcolumn'
call s:hi('ColorColumn', '', 'colorcolumn')

"  Conceal      placeholder characters substituted for concealed
"               text (see 'conceallevel')
call s:hi('Conceal', 'lime')

"  Cursor       character under the cursor
" Windows terminal overrides these settings
" hi Cursor       guifg=#888888 guibg=#444444 ctermfg=015 ctermbg=000

"  lCursor      the character under the cursor when |language-mapping|
"               is used (see 'guicursor')
hi! link lCursor Cursor                            " Dont know what cursor IME mode is

"  CursorIM     like Cursor, but used when in IME mode |CursorIM|
hi! link CursorIM Cursor                            " Dont know what cursor IME mode is

"  CursorColumn Screen-column at the cursor, when 'cursorcolumn' is set.
call s:hi('CursorColumn', 'cursorcolumn')

"  CursorLine   Screen-line at the cursor, when 'cursorline' is set.
"               Low-priority if foreground (ctermfg OR guifg) is not set.
augroup mytheme_cursorline
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
    autocmd InsertEnter * call s:hi('CursorLine', '', 'cursorline')
    autocmd InsertLeave * call s:hi('CursorLine', '', 'cursorline_insert')
augroup END

"  Directory    directory names (and other special names in listings)
call s:hi('Directory', 'directory')

"  DiffAdd      diff mode: Added line |diff.txt|
call s:hi('DiffAdd', 'diffadd_fg', 'diffadd_bg')

"  DiffChange   diff mode: Changed line |diff.txt|
call s:hi('DiffChange', 'diffchange_fg', 'diffchange_bg')

"  DiffDelete   diff mode: Deleted line |diff.txt|
call s:hi('DiffDelete', 'diffdelete_fg', 'diffdelete_bg')

"  DiffText     diff mode: Changed text within a changed line |diff.txt|
call s:hi('DiffText', 'difftext_fg', 'difftext_bg')

"  EndOfBuffer  filler lines (~) after the end of the buffer.
"               By default, this is highlighted like |hl-NonText|.
call s:hi('EndOfBuffer', '', 'endofbuffer')

"  TermCursor   cursor in a focused terminal
" hi TermCursor   guifg=#888888 guibg=#444444 ctermfg=015 ctermbg=000

"  TermCursorNC cursor in an unfocused terminal
" hi TermCursorNC guifg=#888888 guibg=#444444 ctermfg=015 ctermbg=000

"  ErrorMsg     error messages on the command line
call s:hi('ErrorMsg', 'black', 'isoerrorred')

"  VertSplit    the column separating vertically split windows
call s:hi('VertSplit', 'vertsplit')

"  Folded       line used for closed folds
call s:hi('Folded', 'purpleh', 'purple_bg')

"  FoldColumn   'foldcolumn'
call s:hi('FoldColumn', 'foldcolumn_fg', 'purple_bg')

"  SignColumn   column where |signs| are displayed
call s:hi('SignColumn', '', 'signcolumn')

"  IncSearch    'incsearch' highlighting; also used for the text replaced with
"               ":s///c"
call s:hi('IncSearch', 'black', 'incsearch', 'none')

"  Substitute   |:substitute| replacement text highlighting
call s:hi('Substitute', 'black', 'substitute', 'none')

"  LineNr       Line number for ":number" and ":#" commands, and when 'number'
"               or 'relativenumber' option is set.
call s:hi('LineNr', 'linenr_fg', 'linenr_bg')

"  CursorLineNr Like LineNr when 'cursorline' or 'relativenumber' is set for
"               the cursor line.
call s:hi('CursorLineNr', 'cursorlinenr_fg', 'cursorlinenr_bg')

"  MatchParen   The character under the cursor or just before it, if it
"               is a paired bracket, and its match. |pi_paren.txt|
" If not reversed:
"   FG = Other   Parenthesis BG
"   BG = Current parenthesis FG
hi MatchParen   guifg=#00FF00 guibg=#550000 gui=bold ctermfg=015 ctermbg=000 cterm=bold

"  ModeMsg      'showmode' message (e.g., "-- INSERT --")
call s:hi('ModeMsg', 'stringl')

"  MsgArea      Area for messages and cmdline
call s:hi('MsgArea', '#C0C0C0')

"  MsgSeparator Separator for scrolled messages, `msgsep` flag of 'display'
hi MsgSeparator   guifg=#00FF00 guibg=#550000 gui=bold ctermfg=015 ctermbg=000 cterm=bold

"  MoreMsg      |more-prompt|
call s:hi('MoreMsg', 'lime')

"  NonText      '@' at the end of the window, characters from 'showbreak'
"               and other characters that do not really exist in the text
"               (e.g., ">" displayed when a double-wide character doesn't
"               fit at the end of the line). See also |hl-EndOfBuffer|.
hi NonText      guifg=#888888 guibg=#444444 ctermfg=015 ctermbg=000
call s:hi('NonText', 'nontext', '')

"  Normal       normal text
call s:hi('Normal', 'normal')

"  NormalFloat  Normal text in floating windows.
call s:hi('NormalFloat', 'normal')

"  NormalNC     normal text in non-current windows
call s:hi('NormalNC', 'normal')

"  Pmenu        Popup menu: normal item.
call s:hi('Pmenu', 'white', 'pmenu')

"  PmenuSel     Popup menu: setlected item.
call s:hi('PmenuSel', 'black', 'pmenusel')
" Macro
"  PmenuSbar    Popup menu: scrollbar.
call s:hi('PmenuSbar', '', 'pmenusbar')

"  PmenuThumb   Popup menu: Thumb of the scrollbar.
call s:hi('PmenuThumb', '', 'pmenuthumb')

"  Question     |hit-enter| prompt and yes/no questions
call s:hi('Question', 'isocautionyellow', 'bghh')

"  QuickFixLine Current |quickfix| item in the quickfix window. Combined with
"               |hl-CursorLine| when the cursor is there.
call s:hi('QuickFixLine', 'yellow', '', 'bold')
call s:hi('qfFileName', 'red', '', 'bold')
call s:hi('qfLineNr', 'yellow')
call s:hi('qfSeparator', 'black')

"  Search       Last search pattern highlighting (see 'hlsearch').
"               Also used for similar items that need to stand out.
call s:hi('Search', 'black', 'search')

"  SpecialKey   Unprintable characters: text displayed differently from what
"               it really is. But not 'listchars' whitespace. |hl-Whitespace|
call s:hi('SpecialKey', 'special')

"  SpellBad     Word that is not recognized by the spellchecker. |spell|
"               Combined with the highlighting used otherwise.
call s:hi('SpellBad', '', 'spellbad', 'bold,undercurl')

"  SpellCap     Word that should start with a capital. |spell|
"               Combined with the highlighting used otherwise.
call s:hi('SpellBad', '', 'spellbad', 'bold,undercurl')

"  SpellLocal   Word that is recognized by the spellchecker as one that is
"               used in another region. |spell|
"               Combined with the highlighting used otherwise.
call s:hi('SpellLocal', '', 'spelllocal', 'bold,undercurl')

"  SpellRare    Word that is recognized by the spellchecker as one that is
"               hardly ever used. |spell|
"               Combined with the highlighting used otherwise.
call s:hi('SpellRare', '', 'spellrare', 'bold,undercurl')

"  StatusLine   status line of current window
" Set in init/status.cim
" hi StatusLine   guifg=#000000 guibg=#00b000 ctermfg=015 ctermbg=000

"  StatusLineNC status lines of not-current windows
"               Note: if this is equal to "StatusLine" Vim will use "^^^" in
"               the status line of the current window.
" Set in init/status.cim
" hi StatusLineNC guifg=#888888 guibg=#444444 ctermfg=015 ctermbg=000

"  TabLine      tab pages line, not active tab page label
call s:hi('TabLine', 'tabline_fg', 'tabline_bg', 'bold')

"  TabLineFill  tab pages line, where there are no labels
call s:hi('TabLineFill', 'tablinefill_fg', 'tablinefill_bg', 'bold')

"  TabLineSel   tab pages line, active tab page label
call s:hi('TabLineSel', 'tablinesel_fg', 'tablinesel_bg', 'bold')

"  Title        titles for output from ":set all", ":autocmd" etc.
call s:hi('Title', 'white', 'bghh')

"  Visual       Visual mode selection
call s:hi('Visual', '', 'visual')

"  VisualNOS    Visual mode selection when vim is "Not Owning the Selection".
call s:hi('VisualNOS', '', 'visual')

"  WarningMsg   warning messages
call s:hi('WarningMsg', 'isocautionyellow', 'bghh', 'bold')

"  Whitespace   "nbsp", "space", "tab" and "trail" in 'listchars'
call s:hi('Whitespace', 'whitespace')

"  WildMenu     current match in 'wildmenu' completion
call s:hi('WildMenu', 'black', 'wildmenu')


" {{{1 SYNTAX GROUPS (:h group-name)
" :help group-name shows the colors and describes the following groups. coding styles
call s:hi('Comment', 'comment')

call s:hi('Constant', 'constant')
call s:hi('String', 'string')
call s:hi('Character', 'stringh')
call s:hi('Number', 'number')
call s:hi('Boolean', 'constant')
call s:hi('Float', 'numberl')

call s:hi('Identifier', 'main3')
call s:hi('Function', 'main2')

call s:hi('Statement', 'main1')
call s:hi('Conditional', 'nb1')
call s:hi('Repeat', 'nb2')
call s:hi('Label', 'nb2')
call s:hi('Operator', 'nb3')
call s:hi('Keyword', 'nb3')
call s:hi('Exception', 'main3')

call s:hi('PreProc', 'purpleh')
call s:hi('Include', 'purple')
call s:hi('Define', 'purplel')
call s:hi('Macro', 'purplel')
call s:hi('PreCondit', 'purplel')

call s:hi('Type', 'brown')
call s:hi('StorageClass', 'brown')
call s:hi('Structure', 'brown')
call s:hi('Typedef', 'brownh')

call s:hi('Special', 'special')
call s:hi('SpecialChar', 'specialh')
call s:hi('Tag', 'specialh')
call s:hi('Delimiter', 'alt')
call s:hi('SpecialComment', 'altl')
call s:hi('Debug', 'altl')

call s:hi('Underlined', 'speciall', 'underline')
" Ignore         xxx ctermfg=0 guifg=bg
call s:hi('Error', 'white', 'isoerrorred')
call s:hi('Todo', 'black', 'specialh')

" {{{1 UNOFFICIAL COMMON GROUPS
call s:hi('Noise', 'noise')

" {{{1 VIML

" vimTodo        xxx links to Todo
" vimCommand     xxx links to Statement
" vimOnlyCommand xxx cleared
" vimStdPlugin   xxx cleared
" vimOnlyOption  xxx cleared
" vimTermOption  xxx cleared
" vimErrSetting  xxx links to vimError
" vimGroup       xxx links to Type
" vimHLGroup     xxx links to vimGroup
" vimOnlyHLGroup xxx cleared
" vimGlobal      xxx cleared
" vimSubst       xxx links to vimCommand
" vimComment     xxx links to Comment
" vimNumber      xxx links to Number
" vimAddress     xxx links to vimMark
" vimAutoCmd     xxx links to vimCommand
" vimEcho        xxx cleared
" vimIsCommand   xxx cleared
" vimExtCmd      xxx cleared
" vimFilter      xxx cleared
" vimLet         xxx links to vimCommand
" vimMap         xxx links to vimCommand
" vimMark        xxx links to Number
" vimSet         xxx cleared
" vimSyntax      xxx links to vimCommand
" vimUserCmd     xxx cleared
" vimCmdSep      xxx cleared
" vimVar         xxx links to Identifier
call s:hi('vimVar', 'nb2')
" vimFBVar       xxx links to vimVar
" vimInsert      xxx links to vimString
" vimBehaveModel xxx links to vimBehave
" vimBehaveError xxx links to vimError
" vimBehave      xxx links to vimCommand
" vimFTCmd       xxx links to vimCommand
" vimFTOption    xxx links to vimSynType
" vimFTError     xxx links to vimError
" vimFiletype    xxx cleared
" vimAugroup     xxx cleared
" vimExecute     xxx cleared
" vimNotFunc     xxx links to vimCommand
" vimFuncName    xxx links to Function
call s:hi('vimFuncName', 'main3')
" vimFunction    xxx cleared
call s:hi('vimFunction', 'main2')
" vimFunctionError xxx links to vimError
" vimLineComment xxx links to vimComment
" vimSpecFile    xxx links to Identifier
" vimOper        xxx links to Operator
" vimOperParen   xxx cleared
" vimString      xxx links to String
" vimRegister    xxx links to SpecialChar
" vimCmplxRepeat xxx links to SpecialChar
" vimRegion      xxx cleared
" vimSynLine     xxx cleared
" vimNotation    xxx links to Special
" vimCtrlChar    xxx links to SpecialChar
" vimFuncVar     xxx links to Identifier
" vimContinue    xxx links to Special
" vimSetEqual    xxx cleared
" vimOption      xxx links to PreProc
" vimAugroupKey  xxx links to vimCommand
" vimAugroupError xxx links to vimError
" vimEnvvar      xxx links to PreProc
" vimFunc        xxx links to vimError
" vimParenSep    xxx links to Delimiter
" vimSep         xxx links to Delimiter
" vimOperError   xxx links to Error
" vimFuncKey     xxx links to vimCommand
" vimFuncSID     xxx links to Special
" vimAbb         xxx links to vimCommand
" vimEchoHL      xxx links to vimCommand
" vimHighlight   xxx links to vimCommand
" vimNorm        xxx links to vimCommand
" vimSearch      xxx links to vimString
" vimUnmap       xxx links to vimMap
" vimUserCommand xxx links to vimCommand
" vimFuncBody    xxx cleared
" vimFuncBlank   xxx cleared
" vimPattern     xxx links to Type
" vimSpecFileMod xxx links to vimSpecFile
" vimEscapeBrace xxx cleared
" vimSetString   xxx links to vimString
" vimSubstRep    xxx cleared
" vimSubstRange  xxx cleared
" vimUserAttrb   xxx links to vimSpecial
" vimUserAttrbError xxx links to Error
" vimUserAttrbKey xxx links to vimOption
" vimUserAttrbCmplt xxx links to vimSpecial
" vimUserCmdError xxx links to Error
" vimUserAttrbCmpltFunc xxx links to Special
" vimCommentString xxx links to vimString
" vimPatSepErr   xxx links to vimError
" vimPatSep      xxx links to SpecialChar
" vimPatSepZ     xxx links to vimPatSep
" vimPatSepZone  xxx links to vimString
" vimPatSepR     xxx links to vimPatSep
" vimPatRegion   xxx cleared
" vimNotPatSep   xxx links to vimString
" vimStringEnd   xxx links to vimString
" vimStringCont  xxx links to vimString
" vimSubstTwoBS  xxx links to vimString
" vimSubstSubstr xxx links to SpecialChar
" vimCollection  xxx cleared
" vimSubstPat    xxx cleared
" vimSubst1      xxx links to vimSubst
" vimSubst2      xxx cleared
" vimSubstDelim  xxx links to Delimiter
" vimSubstRep4   xxx cleared
" vimSubstFlagErr xxx links to vimError
" vimCollClass   xxx cleared
" vimCollClassErr xxx links to vimError
" vimSubstFlags  xxx links to Special
" vimMarkNumber  xxx links to vimNumber
" vimPlainMark   xxx links to vimMark
" vimRange       xxx cleared
" vimPlainRegister xxx links to vimRegister
" vimSetMod      xxx links to vimOption
" vimSetSep      xxx links to Statement
" vimMapMod      xxx links to vimBracket
" vimMapLhs      xxx cleared
" vimAutoEvent   xxx links to Type
" vimAutoCmdSpace xxx cleared
" vimAutoEventList xxx cleared
" vimAutoCmdSfxList xxx cleared
" vimEchoHLNone  xxx links to vimGroup
" vimMapBang     xxx links to vimCommand
" vimMapRhs      xxx cleared
" vimMapModKey   xxx links to vimFuncSID
" vimMapModErr   xxx links to vimError
" vimMapRhsExtend xxx cleared
" vimMenuBang    xxx cleared
" vimMenuPriority xxx cleared
" vimMenuName    xxx links to PreProc
" vimMenuMod     xxx links to vimMapMod
" vimMenuNameMore xxx links to vimMenuName
" vimMenuMap     xxx cleared
" vimMenuRhs     xxx cleared
" vimBracket     xxx links to Delimiter
" vimUserFunc    xxx links to Normal
" vimElseIfErr   xxx links to Error
" vimBufnrWarn   xxx links to vimWarn
" vimNormCmds    xxx cleared
" vimGroupSpecial xxx links to Special
" vimGroupList   xxx cleared
" vimSynError    xxx links to Error
" vimSynContains xxx links to vimSynOption
" vimSynKeyContainedin xxx links to vimSynContains
" vimSynNextgroup xxx links to vimSynOption
" vimSynType     xxx links to vimSpecial
" vimAuSyntax    xxx cleared
" vimSynCase     xxx links to Type
" vimSynCaseError xxx links to vimError
" vimClusterName xxx cleared
" vimGroupName   xxx links to vimGroup
" vimGroupAdd    xxx links to vimSynOption
" vimGroupRem    xxx links to vimSynOption
" vimIskList     xxx cleared
" vimIskSep      xxx links to Delimiter
" vimSynKeyOpt   xxx links to vimSynOption
" vimSynKeyRegion xxx cleared
" vimMtchComment xxx links to vimComment
" vimSynMtchOpt  xxx links to vimSynOption
" vimSynRegPat   xxx links to vimString
" vimSynMatchRegion xxx cleared
" vimSynMtchCchar xxx cleared
" vimSynMtchGroup xxx cleared
" vimSynPatRange xxx links to vimString
" vimSynNotPatRange xxx links to vimSynRegPat
" vimSynRegOpt   xxx links to vimSynOption
" vimSynReg      xxx links to Type
" vimSynMtchGrp  xxx links to vimSynOption
" vimSynRegion   xxx cleared
" vimSynPatMod   xxx cleared
" vimSyncC       xxx links to Type
" vimSyncLines   xxx cleared
" vimSyncMatch   xxx cleared
" vimSyncError   xxx links to Error
" vimSyncLinebreak xxx cleared
" vimSyncLinecont xxx cleared
" vimSyncRegion  xxx cleared
" vimSyncGroupName xxx links to vimGroupName
" vimSyncKey     xxx links to Type
" vimSyncGroup   xxx links to vimGroupName
" vimSyncNone    xxx links to Type
" vimHiLink      xxx cleared
" vimHiClear     xxx links to vimHighlight
" vimHiKeyList   xxx cleared
" vimHiCtermError xxx links to vimError
" vimHiBang      xxx cleared
" vimHiGroup     xxx links to vimGroupName
call s:hi('vimHiGroup', 'main3')
" vimHiAttrib    xxx links to PreProc
" vimFgBgAttrib  xxx links to vimHiAttrib
" vimHiAttribList xxx links to vimError
" vimHiCtermColor xxx cleared
" vimHiFontname  xxx cleared
" vimHiGuiFontname xxx cleared
" vimHiGuiRgb    xxx links to vimNumber
call s:hi('vimHiGuiRgb', 'constant')
" vimHiBlend     xxx links to vimHiTerm
" vimHiTerm      xxx links to Type
" vimHiCTerm     xxx links to vimHiTerm
" vimHiStartStop xxx links to vimHiTerm
" vimHiCtermFgBg xxx links to vimHiTerm
" vimHiGui       xxx links to vimHiTerm
" vimHiGuiFont   xxx links to vimHiTerm
" vimHiGuiFgBg   xxx links to vimHiTerm
call s:hi('vimHiGuiFgBg', 'nb2')
" vimHiKeyError  xxx links to vimError
" vimHiTermcap   xxx cleared
" vimHiNmbr      xxx links to Number
" vimCommentTitle xxx links to PreProc
" vimCommentTitleLeader xxx cleared
" vimSearchDelim xxx links to Statement
" vimEmbedError  xxx links to Normal
" vimAugroupSyncA xxx cleared
" vimError       xxx links to Error
" vimKeyCodeError xxx links to vimError
" vimWarn        xxx links to WarningMsg
" vimAuHighlight xxx links to vimHighlight
" vimAutoCmdOpt  xxx links to vimOption
" vimAutoSet     xxx links to vimCommand
" vimCondHL      xxx links to vimCommand
" vimElseif      xxx links to vimCondHL
" vimFold        xxx links to Folded
" vimSynOption   xxx links to Special
" vimHLMod       xxx links to PreProc
" vimKeyCode     xxx links to vimSpecFile
" vimKeyword     xxx links to Statement
" vimScriptDelim xxx links to Comment
" vimSpecial     xxx links to Type
" vimStatement   xxx links to Statement

" {{{1 HTML

" htmlError      xxx links to Error
" htmlSpecialChar xxx links to Special
" htmlString     xxx links to String
" htmlValue      xxx links to String
call s:hi('htmlValue','number')
" htmlTagN       xxx cleared
" htmlTagError   xxx links to htmlError
" htmlEndTag     xxx links to Identifier
call s:hi('htmlEndTag','noisell')
" htmlArg        xxx links to Type
call s:hi('htmlArg', 'nb1')
" htmlEvent      xxx links to javaScript
call s:hi('htmlEvent', 'alt')
" htmlCssDefinition xxx links to Special
" htmlTag        xxx links to Function
call s:hi('htmlTag','noise')
" htmlTagName    xxx links to htmlStatement
call s:hi('htmlTagName','main2')
" htmlSpecialTagName xxx links to Exception
call s:hi('htmlSpecialTagName', 'main1')
" htmlCommentPart xxx links to Comment
" htmlCommentError xxx links to htmlError
" htmlComment    xxx links to Comment
call s:hi('htmlComment', 'commentl')
" htmlPreStmt    xxx links to PreProc
" htmlPreError   xxx links to Error
" htmlPreAttr    xxx links to String
" htmlPreProc    xxx links to PreProc
" htmlPreProcAttrError xxx links to Error
" htmlPreProcAttrName xxx links to PreProc
" htmlLink       xxx links to Underlined
" htmlStrike     xxx cterm=strikethrough gui=strikethrough
" htmlBoldUnderline xxx cterm=bold,underline gui=bold,underline
" htmlBoldItalic xxx cterm=bold,italic gui=bold,italic
" htmlBold       xxx cterm=bold gui=bold
" htmlBoldUnderlineItalic xxx cterm=bold,underline,italic gui=bold,underline,italic
" htmlBoldItalicUnderline xxx links to htmlBoldUnderlineItalic
" htmlUnderlineBold xxx links to htmlBoldUnderline
" htmlUnderlineItalic xxx cterm=underline,italic gui=underline,italic
" htmlUnderline  xxx cterm=underline gui=underline
" htmlUnderlineBoldItalic xxx links to htmlBoldUnderlineItalic
" htmlUnderlineItalicBold xxx links to htmlBoldUnderlineItalic
" htmlItalicBold xxx links to htmlBoldItalic
" htmlItalicUnderline xxx links to htmlUnderlineItalic
" htmlItalic     xxx cterm=italic gui=italic
" htmlItalicBoldUnderline xxx links to htmlBoldUnderlineItalic
" htmlItalicUnderlineBold xxx links to htmlBoldUnderlineItalic
" htmlLeadingSpace xxx links to None
" htmlH1         xxx links to Title
" htmlH2         xxx links to htmlH1
" htmlH3         xxx links to htmlH2
" htmlH4         xxx links to htmlH3
" htmlH5         xxx links to htmlH4
" htmlH6         xxx links to htmlH5
" htmlTitle      xxx links to Title
" htmlHead       xxx links to PreProc
" htmlCssStyleComment xxx links to Comment
" htmlScriptTag  xxx links to htmlTag
" htmlEventSQ    xxx links to htmlEvent
" htmlEventDQ    xxx links to htmlEvent
call s:hi('htmlEventDQ', 'alth')
" htmlStyleArg   xxx links to htmlString
call s:hi('htmlStyleArg', 'fuchsia')
" htmlHighlight  xxx cleared
" htmlHighlightSkip xxx cleared
" htmlStatement  xxx links to Statement
" htmlSpecial    xxx links to Special

" {{{1 CSS & SCSS
" " Chars
" call s:hi('cssAttrComma',               'brightsky')
" call s:hi('cssFunctionComma',           'brightsky')
" call s:hi('cssSelectorOp',              'brightsky')
" call s:hi('cssFunction',                'brightsky')
" call s:hi('cssSelectorOp2',             'green')
" call s:hi('cssUnicodeEscape',           'yellow')

" " Main
" call s:hi('cssAttr',                    'yellow')
" call s:hi('cssAttrRegion',              'mustard')
" call s:hi('cssDefinition',              'red') " Doesnt seem to work
" call s:hi('cssPseudoClass',             'peach')
" call s:hi('cssPseudoClassId',           'peach')
" call s:hi('cssPseudoClassFn',           'peach')
" call s:hi('cssStringQ',                 'grassgreen')
" call s:hi('cssStringQQ',                'grassgreen')
" call s:hi('cssImportant',               'red')
" call s:hi('cssFunctionName',            'purple')
" call s:hi('cssAtRule',                  'skybright')

" " Selectors

" " Values
" call s:hi('cssValueInteger',            'brightsky')
" call s:hi('cssValueNumber',             'brightsky')
" call s:hi('cssValueLength',             'brightsky')
" call s:hi('cssValueAngle',              'brightsky')
" call s:hi('cssValueTime',               'brightsky')
" call s:hi('cssComment',                 'gray')
" call s:hi('cssAtKeyword',               'skybright')
" call s:hi('cssAtRuleLogical',           'skypale')
" call s:hi('cssMediaType',               'skypale')
" call s:hi('scssComment',                'gray')
" call s:hi('sassCssComment',             'gray')

" cssTagName     xxx links to Statement
call s:hi('cssTagName', 'main1', 'main1_bg')
" cssSelectorOp  xxx links to Special
" cssSelectorOp2 xxx links to Special
" cssUnicodeEscape xxx links to Special
" cssStringQ     xxx links to String
" cssStringQQ    xxx links to String
" cssAttributeSelector xxx links to String
call s:hi('cssAttributeSelector', 'speciall', 'special_bg')
" cssClassName   xxx links to Function
call s:hi('cssClassName', 'purple', 'purple_bg')
" cssClassNameDot xxx links to Function
hi! link cssClassNameDot cssClassName
" cssIdentifier  xxx links to Function
call s:hi('cssIdentifier', 'main2', 'main2_bg')
" cssUnitDecorators xxx links to Number
call s:hi('cssUnitDecorators', 'numberl')
" cssValueInteger xxx links to Number
" cssValueNumber xxx links to Number
" cssValueLength xxx links to Number
" cssValueAngle  xxx links to Number
" cssValueTime   xxx links to Number
" cssValueFrequency xxx links to Number
" cssColor       xxx links to Constant
call s:hi('cssColor', 'constanth')
" cssImportant   xxx links to Special
" cssCustomProp  xxx links to Special
" cssFunctionName xxx links to Function
" cssURL         xxx links to String
" cssFunction    xxx links to Constant
" cssFunctionComma xxx links to Function
" cssGradientAttr xxx links to cssAttr
" cssCommonAttr  xxx links to cssAttr
" cssAnimationProp xxx links to cssProp
" cssAnimationAttr xxx links to cssAttr
" cssBackgroundProp xxx links to cssProp
" cssBackgroundAttr xxx links to cssAttr
" cssBorderProp  xxx links to cssProp
" cssBorderAttr  xxx links to cssAttr
" cssBoxProp     xxx links to cssProp
" cssBoxAttr     xxx links to cssAttr
" cssCascadeProp xxx links to cssProp
" cssCascadeAttr xxx links to cssAttr
" cssColorProp   xxx links to cssProp
" cssDimensionProp xxx links to cssProp
" cssFlexibleBoxProp xxx links to cssProp
" cssFlexibleBoxAttr xxx links to cssAttr
" cssFontProp    xxx links to cssProp
" cssFontAttr    xxx links to cssAttr
" cssMultiColumnProp xxx links to cssProp
" cssMultiColumnAttr xxx links to cssAttr
" cssInteractProp xxx links to cssProp
" cssInteractAttr xxx links to cssAttr
" cssGeneratedContentProp xxx links to cssProp
" cssGeneratedContentAttr xxx links to cssAttr
" cssGridProp    xxx links to cssProp
" cssHyerlinkProp xxx links to cssProp
" cssListProp    xxx links to cssProp
" cssListAttr    xxx links to cssAttr
" cssPositioningProp xxx links to cssProp
" cssPositioningAttr xxx links to cssAttr
" cssPrintAttr   xxx links to cssAttr
" cssTableProp   xxx links to cssProp
" cssTableAttr   xxx links to cssAttr
" cssTextProp    xxx links to cssProp
" cssTextAttr    xxx links to cssAttr
" cssTransformProp xxx links to cssProp
" cssTransitionProp xxx links to cssProp
" cssTransitionAttr xxx links to cssAttr
" cssUIProp      xxx links to cssProp
" cssUIAttr      xxx links to cssAttr
" cssIEUIAttr    xxx links to cssAttr
" cssIEUIProp    xxx links to cssProp
" cssAuralProp   xxx links to cssProp
" cssAuralAttr   xxx links to cssAttr
" cssMobileTextProp xxx links to cssProp
" cssMediaProp   xxx links to cssProp
" cssMediaAttr   xxx links to cssAttr
" cssDefinition  xxx cleared
" cssKeyFrameProp xxx links to Constant
" cssPageMarginProp xxx links to cssAtKeyword
" cssPageProp    xxx links to cssProp
" cssFontDescriptorProp xxx links to cssProp
" cssFontDescriptorAttr xxx links to cssAttr
" cssBraces      xxx links to Function
call s:hi('cssBraces', 'alth')
" cssError       xxx links to Error
" cssAtRule      xxx links to Include
" cssAttrRegion  xxx cleared
" cssComment     xxx links to Comment
" cssVendor      xxx links to Comment
call s:hi('cssVendor', 'main3')
" cssHacks       xxx links to Comment
" cssNoise       xxx links to Noise
" call s:hi('cssNoise', 'alt')
" cssBraceError  xxx links to Error
" cssAttrComma   xxx links to Special
" cssPseudoClassId xxx links to PreProc
" cssPseudoClassFn xxx cleared
" cssPseudoClass xxx cleared
" cssSpecialCharQQ xxx cleared
" cssSpecialCharQ xxx cleared
" cssAtKeyword   xxx links to PreProc
" cssAtRuleLogical xxx links to Statement
" cssMediaType   xxx links to Special
" cssPagePseudo  xxx links to PreProc
" cssDeprecated  xxx links to Error
" cssProp        xxx links to StorageClass
call s:hi('cssProp', 'nb2')
" cssContentForPagedMediaProp xxx links to cssProp
" cssLineboxProp xxx links to cssProp
" cssMarqueeProp xxx links to cssProp
" cssPagedMediaProp xxx links to cssProp
" cssPrintProp   xxx links to cssProp
" cssRubyProp    xxx links to cssProp
" cssSpeechProp  xxx links to cssProp
" cssRenderProp  xxx links to cssProp
" cssAttr        xxx links to Constant
" cssContentForPagedMediaAttr xxx links to cssAttr
" cssDimensionAttr xxx links to cssAttr
" cssGridAttr    xxx links to cssAttr
" cssHyerlinkAttr xxx links to cssAttr
" cssLineboxAttr xxx links to cssAttr
" cssMarginAttr  xxx links to cssAttr
" cssMarqueeAttr xxx links to cssAttr
" cssPaddingAttr xxx links to cssAttr
" cssPagedMediaAttr xxx links to cssAttr
" cssRubyAttr    xxx links to cssAttr
" cssSpeechAttr  xxx links to cssAttr
" cssTransformAttr xxx links to cssAttr
" cssRenderAttr  xxx links to cssAttr
" cssPseudoClassLang xxx links to Constant
" cssMediaComma  xxx links to Normal
" cssFontDescriptor xxx links to Special
" cssUnicodeRange xxx links to Constant
" cssPagingProp  xxx cleared

" {{{1 PYTHON
" pythonAsync    xxx links to Statement
" pythonAttribute xxx cleared
" pythonBuiltin  xxx links to Function
call s:hi('pythonBuiltin',              'pink')
" pythonComment  xxx links to Comment
" pythonConditional xxx links to Conditional
" pythonDecorator xxx links to Define
call s:hi('pythonDecorator',        'pinkl')
" pythonDecoratorName xxx links to Function
call s:hi('pythonDecoratorname',    'pink')
" pythonDoctest  xxx links to Special
" pythonDoctestValue xxx links to Define
" pythonEscape   xxx links to Special
" pythonException xxx links to Exception
" pythonExceptions xxx links to Structure
" pythonFunction xxx links to Function
" pythonInclude  xxx links to Include
" pythonMatrixMultiply xxx cleared
" pythonOperator xxx links to Operator
" pythonQuotes   xxx links to String
call s:hi('pythonQuotes', 'stringl')
" pythonRawString xxx links to String
call s:hi('pythonRawstring',        'number')
" pythonRepeat   xxx links to Repeat
" pythonSpaceError xxx cleared
call s:hi('pythonSpaceerror',       'white', 'isoerrorred')
" pythonStatement xxx links to Statement
" pythonString   xxx links to String
" pythonSync     xxx cleared
" pythonTodo     xxx links to Todo
" pythonTripleQuotes xxx links to pythonQuotes

" {{{1 DJANGO
" djangoError    xxx links to Error
" djangoStatement xxx links to Statement
call s:hi('djangoStatement', 'purpleh')
" djangoFilter   xxx links to Identifier
call s:hi('djangoFilter', 'pink', 'alt_bg')
" djangoTodo     xxx links to Todo
" djangoArgument xxx links to Constant
call s:hi('djangoArgument', 'purplel', 'alt_bg')
" djangoTagError xxx links to Error
" djangoVarError xxx links to Error
" djangoTagBlock xxx links to PreProc
call s:hi('djangoTagBlock', 'normalh', 'alt_bg')
" djangoVarBlock xxx links to PreProc
call s:hi('djangoVarBlock', 'pinkh', 'alt_bg')
" djangoComment  xxx links to Comment
call s:hi('djangoComment', 'commentl', 'alt_bg')
" djangoComBlock xxx links to Comment
call s:hi('djangoComBlock', 'comment', 'alt_bg')

" {{{1 JS
" jsNoise        xxx links to Noise
" jsObjectProp   xxx cleared
" jsFuncCall     xxx links to Function
call s:hi('jsfunccall', 'nb3')
" jsPrototype    xxx links to Special
" jsTaggedTemplate xxx links to StorageClass
" jsDot          xxx links to Noise
" jsParensError  xxx links to Error
" jsStorageClass xxx links to StorageClass
" jsDestructuringBlock xxx cleared
" jsDestructuringArray xxx cleared
" jsVariableDef  xxx cleared
" jsFlowDefinition xxx cleared
" jsOperatorKeyword xxx links to jsOperator
" jsOperator     xxx links to Operator
" jsBooleanTrue  xxx links to Boolean
" jsBooleanFalse xxx links to Boolean
" jsImport       xxx links to Include
" jsModuleAsterisk xxx links to Noise
" jsModuleKeyword xxx cleared
" jsModuleGroup  xxx cleared
" jsFlowImportType xxx cleared
" jsExport       xxx links to Include
" jsExportDefault xxx links to StorageClass
" jsFlowTypeStatement xxx cleared
" jsModuleAs     xxx links to Include
" jsFrom         xxx links to Include
" jsModuleComma  xxx links to jsNoise
" jsExportDefaultGroup xxx links to jsExportDefault
" jsString       xxx links to String
" jsFlowTypeKeyword xxx cleared
" jsSpecial      xxx links to Special
" jsTemplateExpression xxx cleared
" jsTemplateString xxx links to String
" jsNumber       xxx links to Number
" jsFloat        xxx links to Float
" jsTemplateBraces xxx links to Noise
" jsRegexpCharClass xxx links to Character
" jsRegexpBoundary xxx links to SpecialChar
" jsRegexpBackRef xxx links to SpecialChar
" jsRegexpQuantifier xxx links to SpecialChar
" jsRegexpOr     xxx links to Conditional
" jsRegexpMod    xxx links to SpecialChar
" jsRegexpGroup  xxx links to jsRegexpString
" jsRegexpString xxx links to String
" jsObjectSeparator xxx links to Noise
" jsObjectShorthandProp xxx links to jsObjectKey
" jsFunctionKey  xxx cleared
" jsObjectValue  xxx cleared
" jsObjectKey    xxx cleared
" jsObjectKeyString xxx links to String
" jsBrackets     xxx links to Noise
" jsFuncArgs     xxx cleared
" jsObjectKeyComputed xxx cleared
" jsObjectColon  xxx links to jsNoise
" jsObjectFuncName xxx links to Function
" jsObjectMethodType xxx links to Type
" jsObjectStringKey xxx links to String
" jsNull         xxx links to Type
" jsReturn       xxx links to Statement
" jsUndefined    xxx links to Type
" jsNan          xxx links to Number
" jsThis         xxx links to Special
" jsSuper        xxx links to Constant
" jsBlock        xxx cleared
" jsBlockLabel   xxx links to Identifier
" jsBlockLabelKey xxx links to jsBlockLabel
" jsStatement    xxx links to Statement
" jsConditional  xxx links to Conditional
" jsParenIfElse  xxx cleared
" jsCommentIfElse xxx links to jsComment
" jsIfElseBlock  xxx cleared
" jsParenSwitch  xxx cleared
" jsRepeat       xxx links to Repeat
" jsParenRepeat  xxx cleared
" jsForAwait     xxx links to Keyword
" jsDo           xxx links to Repeat
" jsRepeatBlock  xxx cleared
" jsLabel        xxx links to Label
" jsSwitchColon  xxx links to Noise
" jsSwitchCase   xxx cleared
" jsTry          xxx links to Exception
" jsTryCatchBlock xxx cleared
" jsFinally      xxx links to Exception
" jsFinallyBlock xxx cleared
" jsCatch        xxx links to Exception
" jsParenCatch   xxx cleared
" jsException    xxx links to Exception
" jsAsyncKeyword xxx links to Keyword
" jsSwitchBlock  xxx cleared
" jsGlobalObjects xxx links to Constant
call s:hi('jsGlobalObjects', 'purple')
" jsGlobalNodeObjects xxx links to Constant
" jsExceptions   xxx links to Constant
" jsBuiltins     xxx links to Constant
" jsFutureKeys   xxx cleared
" jsDomErrNo     xxx links to Constant
" jsDomNodeConsts xxx links to Constant
" jsHtmlEvents   xxx links to Special
" jsSpreadExpression xxx cleared
" jsBracket      xxx cleared
" jsParens       xxx links to Noise
" jsParen        xxx cleared
" jsParensDecorator xxx links to jsParens
" jsParenDecorator xxx cleared
" jsParensIfElse xxx links to jsParens
call s:hi('jsParensIfElse', 'nb1')
" jsParensRepeat xxx links to jsParens
call s:hi('jsParensRepeat', 'nb2')
" jsCommentRepeat xxx links to jsComment
" jsParensSwitch xxx links to jsParens
call s:hi('jsParensSwitch', 'nb2')
" jsParensCatch  xxx links to jsParens
" jsFuncParens   xxx links to Noise
call s:hi('jsFuncParens', 'main2')
" jsFuncArgCommas xxx cleared
" jsComment      xxx links to Comment
" jsFuncArgExpression xxx cleared
" jsRestExpression xxx links to jsFuncArgs
" jsFlowArgumentDef xxx cleared
" jsCommentFunction xxx links to jsComment
" jsFuncBlock    xxx cleared
" jsFlowReturn   xxx cleared
" jsClassBraces  xxx links to Noise
call s:hi('jsClassBraces', 'brown')
" jsClassFuncName xxx links to jsFuncName
" jsClassMethodType xxx links to Type
" jsArrowFunction xxx links to Type
" jsArrowFuncArgs xxx links to jsFuncArgs
" jsGenerator    xxx links to jsFunction
" jsDecorator    xxx links to Special
" jsClassProperty xxx links to jsObjectKey
" jsClassPropertyComputed xxx cleared
" jsClassStringKey xxx links to String
" jsClassBlock   xxx cleared
" jsFuncBraces   xxx links to Noise
call s:hi('jsFuncBraces', 'main2')
" jsIfElseBraces xxx links to Noise
call s:hi('jsIfElseBraces', 'nb1')
" jsTryCatchBraces xxx links to Noise
call s:hi('jsTryCatchBraces', 'main1')
" jsFinallyBraces xxx links to Noise
call s:hi('jsFinallyBraces', 'main1')
" jsSwitchBraces xxx links to Noise
call s:hi('jsSwitchBraces', 'nb2')
" jsRepeatBraces xxx links to Noise
call s:hi('jsRepeatBraces', 'nb2')
" jsDestructuringBraces xxx links to Noise
" jsDestructuringProperty xxx links to jsFuncArgs
" jsDestructuringAssignment xxx links to jsObjectKey
" jsDestructuringNoise xxx links to Noise
" jsDestructuringPropertyComputed xxx cleared
" jsDestructuringPropertyValue xxx cleared
" jsObjectBraces xxx links to Noise
call s:hi('jsObjectBraces', 'alt1')
" jsObject       xxx cleared
" jsBraces       xxx links to Noise
" jsModuleBraces xxx links to Noise
" jsSpreadOperator xxx links to Operator
" jsRestOperator xxx links to Operator
" jsTernaryIfOperator xxx links to Operator
" jsTernaryIf    xxx cleared
" jsFuncName     xxx links to Function
" jsFlowFunctionGroup xxx cleared
" jsFuncArgOperator xxx links to jsFuncArgs
" jsArguments    xxx links to Special
" jsFunction     xxx links to Type
call s:hi('jsfunction ', 'main1')
" jsClassKeyword xxx links to Keyword
call s:hi('jsClassKeyword', 'main1')
" jsExtendsKeyword xxx links to Keyword
" jsClassNoise   xxx links to Noise
" jsFlowClassFunctionGroup xxx cleared
" jsFlowClassGroup xxx cleared
" jsCommentClass xxx links to jsComment
" jsClassDefinition xxx links to jsFuncName
call s:hi('jsClassDefinition', 'main2')
" jsClassValue   xxx cleared
" jsFlowClassDef xxx cleared
" jsDestructuringValue xxx cleared
" jsDestructuringValueAssignment xxx cleared
" jsCommentTodo  xxx links to Todo
" jsEnvComment   xxx links to PreProc
" jsDecoratorFunction xxx links to Function
" jsCharacter    xxx links to Character
" jsBranch       xxx links to Conditional
" jsError        xxx links to Error
" jsOf           xxx links to Operator
" jsDomElemAttrs xxx links to Label
" jsDomElemFuncs xxx links to PreProc
" jsHtmlElemAttrs xxx links to Label
" jsHtmlElemFuncs xxx links to PreProc
" jsCssStyles    xxx links to Label

" {{{1 JSON
call s:hi('jsonBraces', 'alth')

" {{{1 FZF
let $FZF_DEFAULT_OPTS=' --color fg:#D8DEE9,bg:#2E3440,hl:#40a000,fg+:#D8DEE9,bg+:#434C5E,hl+:#60d000,pointer:#fF616A,info:#4C566A,spinner:#4C566A,header:#4C566A,prompt:#81A1C1,marker:#EBCB8B'

" {{{1 Custom Groups

" {{{2 Quickfix
hi _qfNormal            guifg=#ffffff guibg=#333300 " Override default Normal
hi _qfCursorLine                      guibg=#676700 gui=bold " The current cursor line highlighting, works!
hi _qfLineNr            guifg=#ffff00 guibg=#444400 " Line number colour
hi _qfCursorLineNr      guifg=#000000 guibg=#cccc00 " Cursor line number colour

" {{{2 MatchAdd
hi _MatchWrongSpacing                      guibg=#FF0000 " If not a multiple of 4 spaces
hi _MatchTrailingWhitespace                guibg=#880000 " Highlight trailing whitespace

" {{{2 Folds
hi _FoldedLevel1        guifg=lime guibg=red gui=bold,italic
" Currently vim does not support matching text in a folded group yet!
" see https://github.com/neovim/neovim/issues/12649
call s:hi('_FoldedLevel1',   'purpleh', 'purple_bg', 'bold,italic')
call s:hi('_FoldedLevel2',   'purple',  'purple_bg', 'bold,italic')
call s:hi('_FoldedLevel3',   'purplel', 'purple_bg', 'bold,italic')
call s:hi('_UnfoldedLevel1', 'purpleh', 'purple_bg', 'bold,italic')
call s:hi('_UnfoldedLevel2', 'purple',  'purple_bg', 'bold,italic')
call s:hi('_UnfoldedLevel3', 'purplel', 'purple_bg', 'bold,italic')

" {{{2 NERDTree
" hi treeDir              guifg=#FF0000 guibg=#00ff00
" hi NERDTreeFlags        guifg=#dad085
" hi NERDTreeDir          guifg=#dad085
" hi NERDTreeDirSlash     guifg=#6b6220
" hi NERDTreeClosable     guifg=#ff0000
" hi NERDTreeOpenable     guifg=#008000
call s:hi('NERDTreeCWD', 'stringh', 'bghh') " NERDTree root dir

" {{{1 Status line
"StatusLine = Normal Colour of the active bar, and NC = Non Current
hi _StatusModified      guifg=#FFFFFF guibg=#FF0000 gui=BOLD
hi qfError              guifg=#FFFFFF guibg=#FF0000 gui=BOLD

hi StatusLine           guifg=#202020 guibg=#00A000 gui=none " WARNING! By default gui set to reverse, need to overide it with none
hi _StatusFade1         guifg=#00AD00 guibg=#00BB00
hi _StatusFade2         guifg=#00C800 guibg=#00D600
hi _StatusFade3         guifg=#00E300 guibg=#00F100
hi _StatusFile          guifg=#000000 guibg=#00FF00 gui=bold
hi _StatusSubtle        guifg=#007700 guibg=#00A000

hi StatusLineNC         guifg=#000000 guibg=#A0A0A0 gui=none " Status line None current
hi _StatusFadeNC1       guifg=#A8A8A8 guibg=#B0B0B0
hi _StatusFadeNC2       guifg=#b8b8b8 guibg=#b8b8b8
hi _StatusFadeNC3       guifg=#c0c0c0 guibg=#c8c8c8
hi _StatusFileNC        guifg=#000000 guibg=#d0d0d0 gui=bold
hi _StatusSubtleNC      guifg=#707070 guibg=#A0A0A0

hi _qfStatusLine        guifg=#000000 guibg=#C0C000 gui=none " WARNING! By default gui set to reverse, need to overide it with none
hi _qfStatusFade1       guifg=#C8C800 guibg=#D0D000
hi _qfStatusFade2       guifg=#D8D800 guibg=#E0E000
hi _qfStatusFade3       guifg=#E8E800 guibg=#F0F000
hi _qfStatusFile        guifg=#000000 guibg=#FFFF00 gui=bold
hi _qfStatusLineNC      guifg=#ffff00 guibg=#777700
hi _qfStatusSublte      guifg=#007700 guibg=#00A000

hi _helpStatusLine      guifg=#000000 guibg=#A000E0
hi _helpStatusFade1     guifg=#A800E4 guibg=#B000E8
hi _helpStatusFade2     guifg=#B800EA guibg=#C000F0
hi _helpStatusFade3     guifg=#D000F4 guibg=#E000F8
hi _helpStatusFile      guifg=#000000 guibg=#FF00FF gui=bold
hi _helpStatusLineNC    guifg=#ff00ff guibg=#770077
hi _helpStatusSublte    guifg=#000077 guibg=#0000A0

" {{{1 DIFFs (GIT)
" This might be for vim diff, notice DiffAdd vs DiffAdded
" Refer to michael_diff.vim for difftool diffs colour scheme
" Defined in Builtins group: DiffAdd, DiffDelete, DiffText, DiffChange

" DIFF HEADER
" Example of diff header:
" diffFile          diff --git a/src/base/management/commands/deploy.py b/src/base/management/commands/deploy.py
" diffIndexLine     index d99d485..685cd8a 100755
" diffNewFile       --- a/src/base/management/commands/deploy.py
" diffFile          +++ b/src/base/management/commands/deploy.py
" diffLine          @@ -29,18 +29,22 @@      diffSubname: class Command(BaseCommand):
hi diffIndexLine        guifg=#808080
hi diffNewFile          guifg=#D0D0D0 gui=BOLD
hi diffFile             guifg=#808080
hi diffLine             guifg=#808080
hi diffSubname          guifg=#D0D0D0
hi! link DiffAdded   DiffAdd
hi! link DiffChanged DiffChange
hi! link DiffRemoved DiffDelete
"Probably used for side by side diffs:
"diffOnly
"diffDiffer
"diffBDiffer
"diffIsA
"diffCommon
"diffOldFile
"diffComment


" {{{1 MARKDOWN
" Set HTML then set here
"hi markdownHeadingDelimiter guifg=#00E000 guibg=NONE guisp=NONE gui=bold
"hi markdownH1           guifg=#00ff00 guibg=NONE guisp=NONE gui=bold,underline
"hi markdownH2           guifg=#00e000 guibg=NONE guisp=NONE gui=bold
"hi markdownH3           guifg=#00d000 guibg=NONE guisp=NONE gui=bold
"hi markdownH4           guifg=#00c000 guibg=NONE guisp=NONE gui=bold
"hi markdownH5           guifg=#00b000 guibg=NONE guisp=NONE gui=bold
"hi markdownH6           guifg=#00a000 guibg=NONE guisp=NONE gui=bold
"hi markdownListMarker   guifg=#ffff00 guibg=NONE guisp=NONE gui=bold
"hi markdownOrderedMarker guifg=#ffff00 guibg=NONE guisp=NONE gui=bold
""hi markdownCodeBlock    guifg=#ff0000 guibg=NONE guisp=NONE gui=NONE
"hi markdownBlockquote   guifg=#ffff00 guibg=NONE guisp=NONE gui=NONE
"hi markdownCode         guifg=#d0f0d0 guibg=#505050 guisp=NONE gui=NONE

" {{{1 LSP
hi LspDiagnosticsError                      guifg=#ffffff guibg=#ff0000 gui=NONE
hi link LspDiagnosticsErrorSign             LspDiagnosticsError
hi link LspDiagnosticsErrorFloating         LspDiagnosticsErrorguifg

hi LspDiagnosticsWarning                    guifg=#000000 guibg=#d0d000 gui=NONE,italic
hi link LspDiagnosticsWarningSign           LspDiagnosticsWarning
hi link LspDiagnosticsWarningFloating       LspDiagnosticsWarning

hi LspDiagnosticsInformation                guifg=#ffffff guibg=#0000ff gui=NONE
hi link LspDiagnosticsInformationSign       LspDiagnosticsInformation
hi link LspDiagnosticsInformationFloating   LspDiagnosticsInformation

hi LspDiagnosticsHint                       guifg=#ffffff guibg=#008800 gui=NONE
hi link LspDiagnosticsHintSign              LspDiagnosticsHint
hi link LspDiagnosticsHintFloating          LspDiagnosticsHint

hi LspReferenceText                         guifg=#ff0000 guibg=#888888 gui=NONE
hi LspReferenceRead                         guifg=#00ff00 guibg=#888888 gui=NONE
hi LspReferenceWrite                        guifg=#0000ff guibg=#888888 gui=NONE

endfunction " s:applyScheme
