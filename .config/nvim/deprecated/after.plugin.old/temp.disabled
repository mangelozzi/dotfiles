
-------------- You might not need mason end


-- Fix Undefined global 'vim'
lsp.configure('sumneko_lua', {
    settings = {
        Lua = {
            diagnostics = {
                globals = { 'vim' }
            }
        }
    }
})

------------
-- MASON
require('mason').setup()

require('mason-lspconfig').setup({
  ensure_installed = {
    'bashls',
    'cssls',
    'html',
    'pyright',
    'tsserver',
    'sumneko_lua',
    'jsonls',
    'marksman',
    --'rust_analyzer',
  }
})

-- ------------------
-- nvim-cmp
-- Refer to https://github.com/lukas-reineke/dotfiles/blob/master/vim/lua/plugins/nvim-cmp.lua (also does not have auto pop up)
local cmp = require'cmp'

    -- Global setup.
    cmp.setup({
      autocomplete = false,
      snippet = {
        expand = function(args)
          require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        end,
      },
      window = {
        -- completion = cmp.config.window.bordered(),
        -- documentation = cmp.config.window.bordered(),
      },
      mapping = cmp.mapping.preset.insert({
        ['<C-d>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
      }),
      sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        -- { name = 'luasnip' }, -- For luasnip users.
      }, {
        { name = 'buffer' },
      })
    })

    -- `/` cmdline setup.
    cmp.setup.cmdline('/', {
      mapping = cmp.mapping.preset.cmdline(),
      sources = {
        { name = 'buffer' }
      }
    })

    -- `:` cmdline setup.
    cmp.setup.cmdline(':', {
      mapping = cmp.mapping.preset.cmdline(),
      sources = cmp.config.sources({
        { name = 'path' }
      }, {
        { name = 'cmdline' }
      })
    })

    -- Setup lspconfig.
    local capabilities = require('cmp_nvim_lsp').default_capabilities()
    require('lspconfig')[%YOUR_LSP_SERVER%].setup {
      capabilities = capabilities
    }
-------------------
local lsp_attach = function(client, bufnr)
  -- Create your keybindings here...
  vim.keymap.set('n', '<leader>ld', function() vim.lsp.buf.declaration() end, opts)
  vim.keymap.set('n', '<c-]>', function() vim.lsp.buf.definition() end, opts)
  vim.keymap.set('n', 'K', function() vim.lsp.buf.hover() end, opts)
  vim.keymap.set('n', 'gD', function() vim.lsp.buf.implementation() end, opts)
  -- vim.keymap.set("i", "<C-h>",   function() vim.lsp.buf.signature_help() end, opts)
  vim.keymap.set('n', '<leader>ls', function() vim.lsp.buf.signature_help() end, opts)
  vim.keymap.set("n", "<leader>lws", function() vim.lsp.buf.workspace_symbol() end, opts)
  vim.keymap.set('n', '<leader>lwa', function() vim.lsp.buf.add_workspace_folder() end, opts)
  vim.keymap.set('n', '<leader>lwr', function() vim.lsp.buf.remove_workspace_folder() end, opts)
  vim.keymap.set('n', '<leader>lwl', function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, opts)
  vim.keymap.set('n', '<leader>ld', function() vim.lsp.buf.type_definition() end, opts)
  vim.keymap.set('n', '<leader>lr', function() vim.lsp.buf.rename() end, opts)
  vim.keymap.set('n', '<leader>la', function() vim.lsp.buf.code_action() end, opts)
  vim.keymap.set('n', 'gr', function() vim.lsp.buf.references() end, opts)
  vim.keymap.set("n", "<leader>sd", function() vim.diagnostic.open_float() end, opts)
  vim.keymap.set('n', '[d', function() vim.diagnostic.goto_prev() end, opts)
  vim.keymap.set('n', ']d', function() vim.diagnostic.goto_next() end, opts)
  vim.keymap.set('n', '<space>q', function() vim.diagnostic.set_loclist() end, opts)
  vim.keymap.set("n", "<space><F6>", function() vim.lsp.buf.formatting() end, opts)
  vim.keymap.set("n", "<space>ll", function() vim.api.nvim_command('LspRestart') end, opts)
end

local lspconfig = require('lspconfig')
require('mason-lspconfig').setup_handlers({
  function(server_name)
    lspconfig[server_name].setup({
      on_attach = lsp_attach,
      capabilities = lsp_capabilities,
    })
  end,
})
